## 🧠 Core Differences

| Feature              | `HashMap`                        | `LinkedHashMap`                     | `TreeMap`                          |
|----------------------|----------------------------------|-------------------------------------|------------------------------------|
| Order of elements    | ❌ No order guaranteed           | ✅ Maintains **insertion order**    | ✅ Sorted by **keys** (natural or custom) |
| Performance          | ⚡ Fast (O(1) for get/put)       | ⚡ Slightly slower than `HashMap`   | 🐢 Slower (O(log n) for get/put)   |
| Null keys/values     | ✅ One null key, multiple null values | ✅ Same as `HashMap`              | ❌ No null keys allowed            |
| Underlying structure | Hash table                      | Hash table + linked list           | Red-black tree                    |
| Use case             | Fast lookup, unordered data     | Ordered iteration                  | Sorted data, range queries        |

---

## 🔍 When to Use Each

### 🔹 `HashMap`
Use when:
- You need **fast access** and don’t care about order
- Keys are unique and hashable
- Example: Caching user sessions, storing config flags

```java
Map<String, Integer> map = new HashMap<>();
```

---

### 🔹 `LinkedHashMap`
Use when:
- You need **predictable iteration order**
- You want to implement **LRU cache** (via `removeEldestEntry`)
- Example: Maintaining recent access history

```java
Map<String, Integer> map = new LinkedHashMap<>();
```

---

### 🔹 `TreeMap`
Use when:
- You need **sorted keys** or **range-based queries**
- You want to implement **navigable maps** (`floorKey`, `ceilingKey`)
- Example: Leaderboard, price ranges, time-series data

```java
Map<String, Integer> map = new TreeMap<>();
```