An immutable class is one whose state cannot be modified after it's created.
Here's how to create one:

Key Requirements for Immutability
Declare the class as final - Prevents subclassing and overriding methods

Make all fields private and final - Ensures fields can't be accessed directly or modified

Don't provide setter methods - No way to modify fields after construction

Initialize all fields via constructor - All values must be set at creation time

Perform deep copy for mutable objects - If your class contains mutable objects:

Don't provide direct references in getters

Don't store references passed from outside

Example Implementation of Immutable Class in Java

public final class ImmutablePerson {
    private final String name;
    private final int age;
    private final Date birthDate;  // Date is mutable

    public ImmutablePerson(String name, int age, Date birthDate) {
        this.name = name;
        this.age = age;
        // Defensive copy for mutable field
        this.birthDate = new Date(birthDate.getTime());
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public Date getBirthDate() {
        // Return defensive copy
        return new Date(birthDate.getTime());
    }
}

What is an immutable object?

Answer: An immutable object is an object whose state cannot be modified after it has been created.
This means that once the object's data is set through its constructor, it cannot be changed.
Immutable objects are beneficial for thread safety and easier reasoning about code.
What are the advantages of using immutable objects?

Answer:
Thread Safety: Immutable objects are inherently thread-safe since their state cannot change.
Simpler Code: They reduce complexity in managing state and side effects.
Caching: Immutable objects can be cached and reused, improving performance.
Easier Debugging: Since their state does not change, it is easier to track their behavior and find bugs.
How do you create an immutable class in Java?

Answer: To create an immutable class:
Declare the class as final.
Make all fields private and final.
Use a constructor to initialize all fields.
Provide only getter methods without setters.
If any field is a mutable object, return copies of those objects in the getters.

Can you give an example of an immutable class?

Answer:
public final class ImmutablePerson {
    private final String name;
    private final int age;

    public ImmutablePerson(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}
What is the difference between mutable and immutable objects?

Answer: Mutable objects can have their state changed after creation (e.g., StringBuilder), while
immutable objects cannot (e.g., String). Mutable objects require careful handling in multi-threaded
environments, while immutable objects do not.

How do immutable objects affect memory management?

Answer: Immutable objects can lead to increased memory usage since each modification results in the creation of a new object rather than modifying an existing one. However, they can also facilitate garbage collection because they are less likely to be referenced after use.
What challenges might you face when using immutable objects?

Answer:
Memory Overhead: Frequent creation of new objects can lead to higher memory consumption.
Performance: In scenarios where frequent modifications are needed, using immutable objects may lead to performance issues due to the overhead of creating new instances.
What is the role of the String class in Java concerning immutability?

Answer: The String class in Java is immutable, meaning that once a String object is created, its value cannot be changed. Any operation that appears to modify a string actually creates a new String object. This design choice enhances security and performance, especially in multi-threaded applications.
How would you implement a mutable version of an immutable class?
Answer: You could provide a builder pattern or provide methods that return new instances of the
object with modified values instead of altering the original instance. This approach maintains immutability while allowing for more flexible object creation.

Can you explain how the builder pattern can be used with immutable objects?
Answer: The builder pattern allows for the gradual construction of an immutable object. It typically
involves a static inner class with methods to set the desired properties, culminating in a build() method that creates the immutable object. This provides a clean and readable way to create complex immutable objects.
Conclusion
These questions cover various aspects of immutable objects, including their definition, advantages, implementation, and implications in software design. Preparing for these topics can help candidates articulate their understanding of immutability in Java and its practical applications in software development.


How to make a immutable object mutable? Explain with example

To clarify, the term "immutable object" refers to an object whose state cannot be changed after it has been created. By definition, an immutable object cannot be made mutable without changing its fundamental characteristics. However, you can create a mutable version of an immutable object by designing a new class that allows modifications, or you can provide methods to create new instances with modified data while keeping the original instance unchanged.

Approaches to Making Immutable Objects Mutable
Builder Pattern: This pattern allows you to construct a new instance of an object with modified properties while keeping the original immutable instance intact.

Wrapper Class: Create a separate mutable wrapper around the immutable object that allows for changes.

Copying with Modifications: Provide methods in the immutable class that return new instances with the desired modifications.

Example Using the Builder Pattern
Here's an example that demonstrates how to use the Builder pattern to modify an immutable object:

Immutable Class
public final class ImmutablePerson {
    private final String name;
    private final int age;

    public ImmutablePerson(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    // Method to create a new instance with a modified name
    public ImmutablePerson withName(String newName) {
        return new ImmutablePerson(newName, this.age);
    }

    // Method to create a new instance with a modified age
    public ImmutablePerson withAge(int newAge) {
        return new ImmutablePerson(this.name, newAge);
    }
}
Usage
public class Main {
    public static void main(String[] args) {
        ImmutablePerson person = new ImmutablePerson("Alice", 30);

        // Create a new instance with a modified name
        ImmutablePerson updatedPerson = person.withName("Bob");

        System.out.println("Original Name: " + person.getName()); // Alice
        System.out.println("Updated Name: " + updatedPerson.getName()); // Bob

        // Create a new instance with a modified age
        ImmutablePerson agedPerson = person.withAge(31);

        System.out.println("Original Age: " + person.getAge()); // 30
        System.out.println("Updated Age: " + agedPerson.getAge()); // 31
    }
}
Explanation
Immutable Class: The ImmutablePerson class is defined as immutable. It has final fields and no setters.
Modification Methods: The methods withName and withAge return new instances of ImmutablePerson with the specified
changes, leaving the original instance unmodified.
Usage: In the Main class, when you want to "modify" the person, you call the respective methods to create a new
instance with the desired changes.
Conclusion
While you cannot directly make an immutable object mutable, you can design your classes to allow for a flexible way to
create modified versions of those objects. The builder pattern and methods that return new instances are effective
techniques for achieving this while adhering to immutability principles. This approach retains the benefits of
immutability while providing a mechanism for creating variations of the objects as needed.


how to make a collection immutable?

In Java, you can create immutable collections using several approaches. Immutable collections do not allow any modification after they have been created, which makes them thread-safe and easier to work with in concurrent programming. Below are some of the common ways to create immutable collections:

1. Using Collections.unmodifiableCollection()
You can wrap a mutable collection with Collections.unmodifiableCollection() to create an immutable view of the collection.

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ImmutableCollectionExample {
    public static void main(String[] args) {
        List<String> mutableList = new ArrayList<>();
        mutableList.add("Apple");
        mutableList.add("Banana");

        // Create an immutable collection
        List<String> immutableList = Collections.unmodifiableList(mutableList);

        // The following line will throw UnsupportedOperationException
        // immutableList.add("Cherry");

        System.out.println(immutableList);
    }
}
2. Using Java 8+ Factory Methods
Java 8 introduced factory methods for creating immutable lists, sets, and maps directly. You can use these methods to create immutable collections.

For Lists
import java.util.List;

public class ImmutableListExample {
    public static void main(String[] args) {
        List<String> immutableList = List.of("Apple", "Banana", "Cherry");

        // The following line will throw UnsupportedOperationException
        // immutableList.add("Date");

        System.out.println(immutableList);
    }
}
For Sets
import java.util.Set;

public class ImmutableSetExample {
    public static void main(String[] args) {
        Set<String> immutableSet = Set.of("Apple", "Banana", "Cherry");

        // The following line will throw UnsupportedOperationException
        // immutableSet.add("Date");

        System.out.println(immutableSet);
    }
}
For Maps
import java.util.Map;

public class ImmutableMapExample {
    public static void main(String[] args) {
        Map<String, Integer> immutableMap = Map.of("Apple", 1, "Banana", 2);

        // The following line will throw UnsupportedOperationException
        // immutableMap.put("Cherry", 3);

        System.out.println(immutableMap);
    }
}
3. Using Custom Immutable Collection Classes
You can also create your own immutable collection classes by carefully managing the state of the object. This involves using private final fields and providing only getter methods without setters.

import java.util.Collections;
import java.util.List;

public final class ImmutablePersonList {
    private final List<String> people;

    public ImmutablePersonList(List<String> people) {
        this.people = List.copyOf(people);

        // Creates a copy of the list
        //Defensive Copy in Constructor: Instead of directly assigning the incoming people list to the
        //class field, use List.copyOf(people) or new ArrayList<>(people) to create a
        //defensive copy. This prevents any changes made to the original list from affecting the internal state of the
        //ImmutableClassPerson instance.
    }

    public List<String> getPeople() {
        return Collections.unmodifiableList(people); // Return an unmodifiable view
    }
}
Summary
To summarize, you can make a collection immutable in Java using the following methods:

Wrapping mutable collections with Collections.unmodifiableCollection().
Using factory methods introduced in Java 8 (like List.of(), Set.of(), and Map.of()).
Creating custom immutable collection classes that encapsulate the data and provide controlled access.
These approaches ensure that once a collection is created, it cannot be modified, providing safety and predictability in your Java applications.