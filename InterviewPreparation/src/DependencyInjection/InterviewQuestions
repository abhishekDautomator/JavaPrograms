1. Dependency Injection?
Ans. It's a design pattern used in software development which provides inversion of control(IOC)
between the classes and it's dependencies. It allows class to receive it's dependencies from the
external sources rather than creating them internally. This promotes loose coupling, enhances
testability and improves maintainability of the code.

Key Concepts of Dependency Injection
Dependencies: These are the objects or services that a class requires to function correctly.
For example, if a class Car depends on an engine, the engine is considered a dependency.

Inversion of Control (IoC): This principle suggests that the control of object creation and
management should be transferred from the class itself to an external entity, typically a
DI container or framework.

Injection Types:

Constructor Injection: Dependencies are provided through a class constructor.
Setter Injection: Dependencies are provided through setter methods after the object is
constructed.
Interface Injection: The dependency provides an injector method that will inject the
dependency into any client that passes itself (the client) to the injector.

Summary
Dependency Injection is a powerful technique that helps manage dependencies in a clean and
efficient manner. It enhances code flexibility, testability, and maintainability by promoting
loose coupling between components.



