1. Dynamic proxy in java?
Ans. Dynamic proxies in Java provide a flexible way to implement behaviors that can be
    applied to multiple classes without modifying their code directly. By leveraging reflection,
    they enable developers to write cleaner and more maintainable code, especially in scenarios
    that require aspect-oriented programming techniques.

    Dynamic proxies in Java are a way to create objects that act like other objects while the
    program is running. These proxy objects can perform certain tasks, like logging information
    or managing transactions, without changing the original objects. They work by following rules
    defined in an "InvocationHandler," which tells the proxy what to do when someone calls a
    method on it. This feature is helpful for organizing code and adding extra functionality
    easily.

    Key Components of Dynamic Proxies
    Proxy Class: A class that implements one or more interfaces and forwards method calls to an InvocationHandler.

    InvocationHandler: An interface that must be implemented to define the behavior of the proxy
    when methods are invoked. It has a single method:

    Object invoke(Object proxy, Method method, Object[] args) throws Throwable;
    Proxy Creation: You can create a dynamic proxy using the Proxy class provided in the java.lang.reflect package.

    Steps to Create a Dynamic Proxy
    Define an Interface: Create an interface that the proxy will implement.

    Implement the InvocationHandler: Write a class that implements the InvocationHandler interface.

    Create the Proxy Instance: Use the Proxy.newProxyInstance() method to create the proxy instance.

    Example of Dynamic Proxy
    Hereâ€™s a simple example to illustrate how to create and use a dynamic proxy in Java:

    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;

    // Step 1: Define an interface
    interface HelloService {
        void sayHello(String name);
    }

    // Step 2: Implement the InvocationHandler
    class HelloInvocationHandler implements InvocationHandler {
        private final HelloService original;

        public HelloInvocationHandler(HelloService original) {
            this.original = original;
        }

        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            System.out.println("Before invoking method: " + method.getName());
            Object result = method.invoke(original, args); // Call the original method
            System.out.println("After invoking method: " + method.getName());
            return result;
        }
    }

    // Step 3: Use the Proxy
    public class Main {
        public static void main(String[] args) {
            // Original implementation
            HelloService helloService = new HelloService() {
                @Override
                public void sayHello(String name) {
                    System.out.println("Hello, " + name + "!");
                }
            };

            // Create the proxy instance
            HelloService proxyInstance = (HelloService) Proxy.newProxyInstance(
                    HelloService.class.getClassLoader(),
                    new Class[]{HelloService.class},
                    new HelloInvocationHandler(helloService)
            );

            // Use the proxy
            proxyInstance.sayHello("Alice");
        }
    }
    Explanation of the Example
    Interface Definition: The HelloService interface defines a method sayHello.

    Invocation Handler: The HelloInvocationHandler class implements the InvocationHandler interface. It overrides the invoke method to add behavior before and after calling the original method.

    Creating the Proxy: In the main method, we create an instance of HelloService and then create a dynamic proxy that wraps around this instance. The proxy instance is created using the Proxy.newProxyInstance() method, which requires the class loader, the interfaces to implement, and the invocation handler.

    Using the Proxy: When proxyInstance.sayHello("Alice") is called, it triggers the invoke method of the HelloInvocationHandler, allowing us to add custom behavior around the method call.

    Use Cases
    Dynamic proxies are commonly used in various scenarios, including:

    Aspect-Oriented Programming (AOP): For cross-cutting concerns like logging, security, and transaction management.
    Remote Method Invocation (RMI): To create proxies for remote objects.
    Frameworks: Many frameworks (e.g., Spring) use dynamic proxies to create proxy objects for beans and manage their lifecycle.