The @RestController annotation in Spring is a specialized version of the @Controller annotation,
primarily used in building RESTful web services.
It simplifies the creation of REST APIs by automatically handling the conversion of the
response body to JSON or XML format using HTTP message converters. Here’s a detailed description:

Key Features of @RestController

Combination of Annotations:
@RestController is a convenience annotation that combines @Controller and @ResponseBody. This means that
every method in a class annotated with @RestController will return data directly in the response body,
rather than being interpreted as a view name.

Automatic Response Body Handling:
When a method in a @RestController returns an object, Spring automatically serializes it to
JSON (or XML, depending on the configuration) and writes it to the HTTP response body. This eliminates
the need to annotate each method with @ResponseBody.

RESTful API Development:
@RestController is ideal for creating RESTful web services where you want to expose resources and handle
HTTP requests (GET, POST, PUT, DELETE). It aligns with the principles of REST architecture.

Request Mapping:
You can use various mapping annotations like @GetMapping, @PostMapping, @PutMapping, and @DeleteMapping
in conjunction with @RestController to define endpoints for different HTTP methods.


Example Usage
Here’s a simple example of how to use @RestController:
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
@RequestMapping("/api")
public class MyRestController {
    @GetMapping("/hello")
    public String sayHello() {
        return "Hello, World!";
    }
    @GetMapping("/greeting")
    public Greeting getGreeting() {
        return new Greeting("Hello", "World");
    }
    // Inner class for demonstration
    public static class Greeting {
        private String message;
        private String recipient;
        public Greeting(String message, String recipient) {
            this.message = message;
            this.recipient = recipient;
        }
        // Getters and setters
        public String getMessage() {
            return message;
        }
        public void setMessage(String message) {
            this.message = message;
        }
        public String getRecipient() {
            return recipient;
        }
        public void setRecipient(String recipient) {
            this.recipient = recipient;
        }
    }
}

Summary

Purpose: The @RestController annotation is designed for creating RESTful web services in Spring.
Functionality: It combines @Controller and @ResponseBody, streamlining the process of returning data as part of the HTTP response.
Convenience: It reduces boilerplate code by eliminating the need to annotate individual methods with @ResponseBody.

Using @RestController makes it easier to build APIs that communicate over HTTP, adhering to REST principles and providing a clear structure for handling requests and responses.