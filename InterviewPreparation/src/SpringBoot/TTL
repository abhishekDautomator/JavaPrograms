TTL stands for **Time To Live** â€” a setting that defines how long data should be kept before it expires or is discarded.

---

## ðŸ•’ Where TTL Is Used

### ðŸ”¹ 1. **Caching (e.g., Redis, CDN)**
- TTL determines how long a cached item stays valid.
- After TTL expires, the item is evicted or refreshed.
- Example:
  ```java
  redisTemplate.expire("user:123", Duration.ofMinutes(10));
  ```

### ðŸ”¹ 2. **DNS**
- TTL defines how long a DNS record is cached by clients or resolvers.
- Lower TTL = faster propagation of changes.

### ðŸ”¹ 3. **Databases (e.g., MongoDB TTL Index)**
- Automatically deletes documents after a certain time.
- Useful for expiring sessions, logs, or temporary data.

### ðŸ”¹ 4. **Messaging Systems**
- TTL on messages ensures they donâ€™t stay in queues forever.
- Example: RabbitMQ, Kafka with retention policies.

---

## ðŸ§  Interview Tip
If asked about TTL:
- Explain how it helps with **resource management**, **data freshness**, and **automatic cleanup**.
- Mention use cases like **expiring short URLs**, **session tokens**, or **temporary cache entries**.