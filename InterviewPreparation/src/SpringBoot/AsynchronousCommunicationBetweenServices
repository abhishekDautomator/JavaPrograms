Asynchronous communication between two services allows them to exchange data without waiting for immediate
responses, ensuring better scalability and performance. Below are several common approaches with explanations and
code examples:

1. Asynchronous Communication with Message Queues
Message queues, like RabbitMQ or Apache Kafka, are often used for asynchronous communication between services. One service produces messages, while the other consumes them.
Example Using RabbitMQ (Spring Boot)
Producer Service:
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ProducerService {
    private static final String QUEUE_NAME = "myQueue";

    @Autowired
    private RabbitTemplate rabbitTemplate;

    public void sendMessage(String message) {
        rabbitTemplate.convertAndSend(QUEUE_NAME, message);
        System.out.println("Sent message: " + message);
    }
}

@Controller
public class ProducerController {
    @Autowired
    private ProducerService producerService;

    @PostMapping("/send")
    public String sendMessage(@RequestBody String message) {
        producerService.sendMessage(message);
        return "Message sent";
    }
}

Consumer Service:

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;

@Service
public class ConsumerService {
    @RabbitListener(queues = "myQueue")
    public void receiveMessage(String message) {
        System.out.println("Received message: " + message);
        // Process the message
    }
}

RabbitMQ Configuration:
@Configuration
public class RabbitMQConfig {
    @Bean
    public Queue queue() {
        return new Queue("myQueue", false);
    }
}

Steps:
- The producer sends messages to the RabbitMQ queue.
- The consumer listens for messages and processes them asynchronously.

2. Asynchronous Communication with HTTP Callbacks
One service makes a request to another, and the second service responds at a later time using a callback URL provided by the first service.
Example Using Spring Boot
Service A:
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class ServiceA {
    public void requestData(String callbackUrl) {
        RestTemplate restTemplate = new RestTemplate();
        String response = restTemplate.postForObject(callbackUrl, "Request Data", String.class);
        System.out.println("Callback Response: " + response);
    }

    public void requestDataGet(String callbackUrl) {
        RestTemplate restTemplate = new RestTemplate();
        String response = restTemplate.getForObject(callbackUrl, String.class);
        System.out.println("Callback Response: " + response);
    }
}


Service B:
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ServiceB {
    @PostMapping("/callback")
    public String handleCallback(@RequestBody String data) {
        System.out.println("Received callback data: " + data);
        return "Processed Successfully";
    }
}
Steps:
- Service A makes a request to Service B and provides a callback URL.
- Service B processes the request and sends a response to the callback URL.

3. Asynchronous Communication with WebSockets
WebSockets allow for real-time, bidirectional communication between services.
Example Using Spring Boot
Service A:
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

@Service
public class ServiceA {
    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    public void sendMessage(String message) {
        messagingTemplate.convertAndSend("/topic/messages", message);
        System.out.println("Sent message: " + message);
    }
}

@Controller
public class ServiceAController {
    @Autowired
    private ServiceA serviceA;

    @PostMapping("/send")
    public String sendMessage(@RequestBody String message) {
        serviceA.sendMessage(message);
        return "Message sent";
    }
}

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws").withSockJS();
    }

    @Bean
    public SimpMessagingTemplate template(SimpMessageSendingOperations operations) {
        return new SimpMessagingTemplate(operations);
    }
}

Service B:
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;

@Controller
public class ServiceB {
    @MessageMapping("/messages")
    @SendTo("/topic/messages")
    public String receiveMessage(String message) {
        System.out.println("Received message: " + message);
        return "Processed: " + message;
    }
}
Steps:
- Service A sends messages to a WebSocket topic.
- Service B listens for messages on the same topic and processes them.

Each of these approaches has its own use cases and trade-offs, so the choice depends on the specific requirements
of the system.


