1. What is a Java Interface?
A Java interface is a reference type, similar to a class, that can contain only constants,
method signatures, default methods, static methods, and nested types. Interfaces cannot
contain instance variables or method implementations (prior to Java 8).
The primary purpose of an interface is to define a contract that classes can implement,
ensuring that they provide specific functionalities.

An interface allows for abstraction and multiple inheritance in Java,
enabling a class to implement multiple interfaces. For example:

public interface Drawable {
    void draw();
}

2. How do interfaces differ from abstract classes?
Interfaces and abstract classes serve similar purposes in that they both allow you to define
methods that must be implemented in derived classes. However, there are key differences:

Implementation:

An interface can only declare methods without providing an implementation (except for default and static methods).
An abstract class can have both abstract methods (without implementation) and concrete methods (with implementation).
Inheritance:

A class can implement multiple interfaces, allowing for a form of multiple inheritance.
A class can extend only one abstract class (single inheritance).
Fields:

Interfaces cannot have instance variables; they can only have public static final constants.
Abstract classes can have instance variables, which can be private, protected, or public.
Constructor:

Interfaces cannot have constructors since they cannot be instantiated.
Abstract classes can have constructors, which can be called when a subclass is instantiated.

3. Can an interface have instance variables?
No, an interface cannot have instance variables. However, it can declare constants, which are implicitly public, static, and final. This means that any variable defined in an interface is a constant and cannot change its value. For example:

public interface Constants {
    int MAX_SIZE = 100; // This is a constant
}

4. What is the default method in an interface?
A default method in an interface is a method that has a body and is marked with the default keyword. Introduced in Java 8, default methods allow developers to add new methods to interfaces without breaking existing implementations. This is particularly useful for evolving APIs.

Example of a default method:

public interface Vehicle {
    void start();

    default void honk() {
        System.out.println("Beep! Beep!");
    }
}
In this example, any class implementing the Vehicle interface can use the honk method
without needing to provide an implementation, unless it chooses to override it.

5. What are static methods in interfaces, and how are they different from instance methods?
Static methods in interfaces are methods that can be called on the interface itself rather than on instances of classes that implement the interface. They were introduced in Java 8 and can provide utility functions related to the interface.

Key differences between static methods and instance methods in interfaces:

Invocation:

Static methods are invoked using the interface name (e.g., InterfaceName.methodName()).
Instance methods require an object of a class that implements the interface (e.g., object.methodName()).
Context:

Static methods cannot access instance variables or instance methods directly; they can only access static members of the interface.
Instance methods can access both static and instance members of the implementing class.
Example of a static method in an interface:

public interface MathOperations {
    static int add(int a, int b) {
        return a + b;
    }

    int multiply(int a, int b); // instance method
}

public class Calculator implements MathOperations {
    @Override
    public int multiply(int a, int b) {
        return a * b;
    }
}

// Usage
int sum = MathOperations.add(5, 10); // Calling static method
Calculator calc = new Calculator();
int product = calc.multiply(5, 10); // Calling instance method

6. What is a functional interface? Can you give an example?
A functional interface is an interface that contains exactly one abstract method.
Functional interfaces can have multiple default or static methods, but only one abstract
method allows them to be used as the basis for lambda expressions and method references in
Java.

The @FunctionalInterface annotation is often used to indicate that an interface is
intended to be a functional interface. While this annotation is not mandatory, it helps
ensure that the interface adheres to the functional interface rules.

7. How does multiple inheritance work with interfaces in Java?
In Java, multiple inheritance refers to a class inheriting from more than one superclass. Java does not support multiple inheritance with classes to avoid ambiguity issues (the "diamond problem"). However, Java allows a class to implement multiple interfaces, thereby achieving a form of multiple inheritance.

When a class implements multiple interfaces, it must provide implementations for all the abstract methods declared in those interfaces. If two interfaces declare methods with the same name and signature, the implementing class needs to provide a single implementation for that method.

Example:

interface A {
    void display();
}

interface B {
    void display();
}

class C implements A, B {
    @Override
    public void display() {
        System.out.println("Display method implemented in class C");
    }
}
In this case, class C implements both interfaces A and B, and it provides a single implementation of the display method.

8. What is the significance of the @FunctionalInterface annotation?
The @FunctionalInterface annotation in Java is used to declare that an interface is intended to be a functional interface. This annotation serves two main purposes:

Compile-time Checking: The compiler checks that the interface meets the criteria of a functional interface (i.e., it contains exactly one abstract method). If the interface contains more than one abstract method, the compiler will generate an error.

Documentation: It serves as documentation for developers, indicating that the interface is meant to be used with lambda expressions or method references. This makes the intent clearer when reading the code.

Example:

@FunctionalInterface
public interface MyFunction {
    void execute(); // Single abstract method
    // Any number of default or static methods can be added
}
9. Can you implement multiple interfaces in a class? If so, how does it work?
Yes, a class in Java can implement multiple interfaces. This is done by specifying the interfaces in the class declaration, separated by commas. The implementing class must provide concrete implementations for all the abstract methods declared in the interfaces it implements.

When a class implements multiple interfaces, it can inherit method signatures from all of them. If there are conflicting method signatures (i.e., methods with the same name and parameters), the class must provide an implementation that resolves the conflict.

Example:

interface A {
    void methodA();
}

interface B {
    void methodB();
}

class C implements A, B {
    @Override
    public void methodA() {
        System.out.println("Method A implemented");
    }

    @Override
    public void methodB() {
        System.out.println("Method B implemented");
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        C obj = new C();
        obj.methodA(); // Output: Method A implemented
        obj.methodB(); // Output: Method B implemented
    }
}
10. How do you achieve polymorphism through interfaces?
Polymorphism in Java allows objects to be treated as instances of their parent type. Interfaces facilitate polymorphism by allowing a variable of an interface type to refer to any object that implements that interface.

When a class implements an interface, it must provide implementations for the methods defined in the interface. This means you can use the interface type as a reference to any object of the implementing class, enabling dynamic method dispatch at runtime.

Example:

interface Animal {
    void makeSound();
}

class Dog implements Animal {
    @Override
    public void makeSound() {
        System.out.println("Woof!");
    }
}

class Cat implements Animal {
    @Override
    public void makeSound() {
        System.out.println("Meow!");



19. What are the limitations of using interfaces in Java?
While interfaces offer many advantages, they also come with certain limitations:

No Instance Variables: Interfaces cannot have instance variables. They can only define constants (static final fields). This means you cannot store state within an interface, which limits their ability to encapsulate behavior that depends on mutable data.

No Constructor: Interfaces cannot have constructors. This means you cannot instantiate an interface directly or maintain any initialization logic.

Default Methods Complexity: Although default methods were introduced in Java 8 to add new functionality to interfaces without breaking existing implementations, they can lead to complexity when multiple interfaces with default methods are inherited by a single class. This may result in ambiguity regarding which default method to use.

Performance Overhead: The use of interfaces may introduce a slight performance overhead compared to direct method calls on concrete classes, primarily due to dynamic method dispatch. However, this overhead is generally negligible and often outweighed by the benefits of flexibility and maintainability.

Limited to Abstract Behavior: Interfaces are designed to define abstract behavior. If you need to share common code or state among classes, you might need to use abstract classes instead, as they can contain both abstract and concrete methods.

Inability to Change Method Signatures: Once an interface is published, changing its method signatures can break existing implementations. This makes versioning and evolving interfaces carefully necessary.

Overall, while interfaces are powerful tools for abstraction and decoupling, they must be used thoughtfully in the context of the application's architecture and design requirements.